language: cpp

compiler:
  - clang
  - gcc

before_install:
  - if [ "${CXX}" = 'g++' ] && [ "${HOST}" != 'WINE' ] && [ "${USE_COVERAGE}" != 'lcov' ]; then export USE_NEWEST_GCC=1; fi
  - if [ "${USE_NEWEST_GCC}" = '1' ]; then sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test; fi
  #- if [ "${CXX}" = 'clang++' ]; then wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key | sudo apt-key add -; fi
  #- if [ "${CXX}" = 'clang++' ]; then sudo add-apt-repository --yes 'deb http://llvm.org/apt/precise/ llvm-toolchain-precise main'; fi
  #- if [ "${CXX}" = 'clang++' ]; then sudo add-apt-repository -y ppa:h-rayflood/llvm; fi
  - if [ "${HOST}" = 'WINE' ]; then sudo add-apt-repository -y ppa:ubuntu-wine/ppa; fi
  - sudo apt-get -qq update

install:
  # gcc 5.1
  - if [ "${USE_NEWEST_GCC}" = '1' ]; then sudo apt-get -qq install g++-5; fi
  - if [ "${USE_NEWEST_GCC}" = '1' ]; then sudo update-alternatives --install /usr/bin/gcc  gcc  /usr/bin/gcc-5 90; fi
  - if [ "${USE_NEWEST_GCC}" = '1' ]; then sudo update-alternatives --install /usr/bin/g++  g++  /usr/bin/g++-5 90; fi
  - if [ "${USE_NEWEST_GCC}" = '1' ]; then sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-5 90;  fi
  # clang 3.5
  #- if [ "${CXX}" = 'clang++' ]; then sudo apt-get -qq install clang-3.5; fi
  #- if [ "${CXX}" = 'clang++' ]; then export CXX="clang++-3.5";  fi
  # wine
  - if [ "${HOST}" = 'WINE' ]; then sudo apt-get -qq -y install wine; fi
  # winegcc
  - if [ "${WINEGCC}" = '1' ]; then sudo apt-get -qq install wine-dev; fi
  - if [ "${WINEGCC}" = '1' ]; then sudo apt-get -qq install g++-4.5; fi
  # mingw
  - if [ "${MINGW}" = '1' ]; then sudo apt-get -qq install binutils-mingw-w64-i686; fi
  - if [ "${MINGW}" = '1' ]; then sudo apt-get -qq install gcc-mingw-w64-i686; fi
  - if [ "${MINGW}" = '1' ]; then sudo apt-get -qq install g++-mingw-w64-i686; fi
  # gcov
  - if [ "${USE_COVERALLS}" = '1' ] && [ "${USE_COVERAGE}" = 'gcov' ]; then sudo easy_install cpp-coveralls; fi
  # lcov
  - if [ "${USE_COVERAGE}" = 'lcov' ]; then sudo apt-get install lcov rubygems; fi
  - if [ "${USE_COVERALLS}" = '1' ] && [ "${USE_COVERAGE}" = 'lcov' ]; then gem install lcoveralls; fi
  # gtest
  - if [ "${USE_GTEST}" = '1' ]; then sudo apt-get -qq install cmake; fi
  - if [ "${USE_GTEST}" = '1' ]; then sudo apt-get -qq install libgtest-dev; fi
  - if [ "${USE_GTEST}" = '1' ]; then cd /usr/src/gtest && sudo cmake . && sudo cmake --build . && sudo mv libg* /usr/local/lib/; cd -; fi
  # gmock
  - if [ "${USE_GMOCK}" = '1' ]; then sudo apt-get -qq install cmake; fi
  - if [ "${USE_GMOCK}" = '1' ]; then sudo apt-get -qq install google-mock; fi
  - if [ "${USE_GMOCK}" = '1' ]; then cd /usr/src/gtest && sudo cmake . && sudo cmake --build . && sudo mv libg* /usr/local/lib/; cd -; fi
  # cppcheck
  - if [ "${CPPCHECK}" = '1' ]; then sudo apt-get install -y cppcheck; fi

before_script:
  # mingw
  - if [ "${MINGW}" = '1' ]; then export CXX=i686-w64-mingw32-g++; fi
  # winegcc
  - if [ "${WINEGCC}" = '1' ]; then export CXX=wineg++; fi

script:
  - cd ./test
  - make showcxxversion ${USE_FUSED} all
  #- if [ "${CPPCHECK}" = '1' ]; then
  #    cppcheck --version;
  #    cppcheck samples --enable=all -f -j 4 --suppress=syntaxError -i samples/gmock -i samples/gtest -i samples/vcunittest -i samples/windows -UGTEST_HIDE_UNREACHABLE_CODE_ -UGTEST_API_ -UGTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_ -UGTEST_HAS_STD_TUPLE_ -UGTEST_MESSAGE_AT_ -UGTEST_INCLUDE_GTEST_GTEST_TYPED_TEST_H_ -UGMOCK_INCLUDE_GMOCK_GMOCK_H_ -U__STDC_WANT_SECURE_LIB__ -UIUTEST_USE_GTEST -UIUTEST_DEBUG -UIUTEST_FILE -U__GLIBCXX__;
  #  else
  #    cd ./test; make showcxxversion ${USE_FUSED} all;
  #  fi

after_success:
  # Coverage
  #- echo ${TRAVIS_JOB_ID}
  - if [ "${USE_COVERALLS}" = '1' ]; then make send-coveralls; fi
  - if [ "${USE_CODECOV}" = '1' ]; then make send-codecov; fi
  
env:
  global:
    # COVERITY_SCAN_TOKEN
    - secure: "p7jyD2o54mCPQg+3ZSo03/P9G5HJdgZWZ80LQG6Dt4PfNzxBcJWTM4eSZUX+HCe5jTICC7FsDLbucwJUKb5EsXyqvny3QlGp4bvB8OWN8IbroaqpR8s4qVJLzpR9UOGhn+St3dVRZ0y9g9Vjr2/8gknwzqexAwslpGaOLohHZ/0="

  matrix:
    - STDFLAG=-std=c++98
    - STDFLAG=-std=c++11

  allow_failures:
    - COVERITY_SCAN=1

matrix:
  exclude:
    - compiler: clang
      env: COVERITY_SCAN=1
  include:
    - compiler: clang
      env: USE_COVERAGE=gcov USE_CODECOV=1 STDFLAG=-std=c++11
    - compiler: gcc
      env: USE_COVERAGE=lcov USE_COVERALLS=1
    - compiler: gcc
      env: USE_FUSED=fused
    - compiler: gcc
      env: USE_FUSED=fused_min STDFLAG=-std=c++98
    - compiler: gcc
      env: USE_GTEST=1
    - compiler: gcc
      env: USE_GMOCK=1
    - compiler: gcc
      env: MINGW=1 HOST=WINE DEFS="-DIUTEST_HAS_STREAMCAPTURE=0"
    #- compiler: gcc
    #  env: CPPCHECK=1
    #- compiler: gcc
    #  env: WINEGCC=1 HOST=WINE
    - compiler: gcc
      env: COVERITY_SCAN=1
      addons:
        coverity_scan:
          project:
            name: "srz-zumix/iutest"
            description: "iutest c++ testing framework"
          notification_email: zumix.cpp@gmail.com
          build_command_prepend: cd ./test
          build_command: make
          branch_pattern: coverity_scan