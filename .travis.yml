language: cpp

compiler:
  - clang
  - gcc

addons:
  apt: &apt-global
    sources: &apt-common-sources
      - ubuntu-toolchain-r-test
      #- llvm-toolchain-precise-3.8
      #- llvm-toolchain-precise
    packages: &apt-common-packages
      #- clang-3.8
      - g++-5
      - gcc-5
      #- cppcheck

before_install:
  - if [ "${CXX}" = 'g++' ] && [ "${HOST}" != 'WINE' ] && [ "${USE_COVERAGE}" != 'lcov' ]; then export USE_NEWEST_GCC=1; fi

install:
  # gcc 5
#  - |
#    if [ "${USE_NEWEST_GCC}" = '1' ]; then
#      sudo update-alternatives --install /usr/bin/gcc  gcc  /usr/bin/gcc-5 90;
#      sudo update-alternatives --install /usr/bin/g++  g++  /usr/bin/g++-5 90;
#      sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-5 90;
#    fi
  # gcov/lcov
  - |
    if [ "${USE_COVERALLS}" = '1' ]; then
      if [ "${USE_COVERAGE}" = 'gcov' ]; then easy_install cpp-coveralls; fi
      if [ "${USE_COVERAGE}" = 'lcov' ]; then gem install lcoveralls; fi
    fi
  # gtest
  - |
    if [ "${USE_GTEST}" = '1' ]; then
      if [ "${USE_GTEST_HEAD}" == '1' ]; then
        git clone https://github.com/google/googletest.git googletest
        cd googletest/googletest
        sudo cp -r include/gtest /usr/local/include/
      else
        cd /usr/src/gtest
      fi
      sudo cmake . && sudo cmake --build . && sudo mv libg* /usr/local/lib/;
      cd -
    fi
  # gmock
  - |
    if [ "${USE_GMOCK}" = '1' ]; then
      cd /usr/src/gtest && sudo cmake . && sudo cmake --build . && sudo mv libg* /usr/local/lib/; cd -;
    fi

before_script:
  # g++
  - |
    if [ "${USE_NEWEST_GCC}" = '1' ]; then
      export CC=gcc-5
      export CXX=g++-5
      export CCOV=gcov-5
    fi
  # clang
  #- if [ "${CXX}" = 'clang++' ]; then export CXX=clang++-3.8; fi
  # mingw
  - if [ "${MINGW}" = '1' ]; then export CXX=i686-w64-mingw32-g++; fi
  # winegcc
  - if [ "${WINEGCC}" = '1' ]; then export CXX=wineg++; fi

script:
  - if [ "${USE_LIB}" == '1' ]; then cd projects/make && make && cd -; fi
  - cd ./test
  - make showcxxversion ${USE_FUSED} all
  #- if [ "${CPPCHECK}" = '1' ]; then
  #    cppcheck --version;
  #    cppcheck samples --enable=all -f -j 4 --suppress=syntaxError -i samples/gmock -i samples/gtest -i samples/vcunittest -i samples/windows -UGTEST_HIDE_UNREACHABLE_CODE_ -UGTEST_API_ -UGTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_ -UGTEST_HAS_STD_TUPLE_ -UGTEST_MESSAGE_AT_ -UGTEST_INCLUDE_GTEST_GTEST_TYPED_TEST_H_ -UGMOCK_INCLUDE_GMOCK_GMOCK_H_ -U__STDC_WANT_SECURE_LIB__ -UIUTEST_USE_GTEST -UIUTEST_DEBUG -UIUTEST_FILE -U__GLIBCXX__;
  #  else
  #    cd ./test; make showcxxversion ${USE_FUSED} all;
  #  fi

after_success:
  # Coverage
  #- echo ${TRAVIS_JOB_ID}
  - if [ "${USE_COVERALLS}" = '1' ]; then make send-coveralls; fi
  - if [ "${USE_CODECOV}" = '1' ]; then make send-codecov; fi
  
env:
  global:
    # COVERITY_SCAN_TOKEN
    - secure: "p7jyD2o54mCPQg+3ZSo03/P9G5HJdgZWZ80LQG6Dt4PfNzxBcJWTM4eSZUX+HCe5jTICC7FsDLbucwJUKb5EsXyqvny3QlGp4bvB8OWN8IbroaqpR8s4qVJLzpR9UOGhn+St3dVRZ0y9g9Vjr2/8gknwzqexAwslpGaOLohHZ/0="

  matrix:
    - STDFLAG=-std=c++98
    - STDFLAG=

  allow_failures:
    - COVERITY_SCAN=1

matrix:
  include:
    # coverage
    - compiler: clang
      env: USE_COVERAGE=gcov USE_CODECOV=1 STDFLAG=-std=c++11
    - compiler: gcc
      env: USE_COVERAGE=lcov USE_COVERALLS=1 USE_GNU_EXTENSION=1
      addons:
        apt:
          sources: *apt-common-sources
          packages:
            - *apt-common-packages
            - lcov
            - rubygems
    # fused
    - compiler: gcc
      env: USE_FUSED=fused
    - compiler: gcc
      env: USE_FUSED=fused_min STDFLAG=-std=c++98
    # Google Test
    - compiler: gcc
      env: USE_GTEST=1 USE_GTEST_HEAD=1
      addons:
        apt:
          sources: *apt-common-sources
          packages: &apt-cmake-packages
            - *apt-common-packages
            - cmake
    - compiler: gcc
      env: USE_GTEST=1
      addons:
        apt:
          sources: *apt-common-sources
          packages:
            - *apt-cmake-packages
            - libgtest-dev
    # Google Mock
    - compiler: gcc
      env: USE_GMOCK=1
      addons:
        apt:
          sources: *apt-common-sources
          packages:
            - *apt-cmake-packages
            - google-mock
    # MinGW
    - compiler: gcc
      env: MINGW=1 HOST=WINE DEFS="-DIUTEST_HAS_STREAM_BUFFER=0"
      before_install:
        - sudo add-apt-repository -y ppa:ubuntu-wine/ppa
        - sudo apt-get -qq update
      install:
        - sudo apt-get -qq -y install wine
      addons:
        apt:
          sources: *apt-common-sources
          packages:
            - *apt-common-packages
            - binutils-mingw-w64-i686
            - gcc-mingw-w64-i686
            - g++-mingw-w64-i686
    - compiler: gcc
      env: USE_LIB=1
    #- compiler: gcc
    #  env: CPPCHECK=1
    - compiler: gcc
      env: COVERITY_SCAN=1
      addons:
        apt: *apt-global
        coverity_scan:
          project:
            name: "srz-zumix/iutest"
            description: "iutest c++ testing framework"
          notification_email: zumix.cpp@gmail.com
          build_command_prepend: cd ./test
          build_command: make
          branch_pattern: coverity_scan
