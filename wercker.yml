# This references the default Python container from
# the Docker Hub with the 2.7 tag:
# https://registry.hub.docker.com/_/python/
# If you want to use a slim Python container with
# version 3.4.3 you would use: python:3.4-slim
# If you want Google's container you would reference google/python
# Read more about containers on our dev center
# http://devcenter.wercker.com/docs/containers/index.html
box: python:2.7
# You can also use services such as databases. Read more on our dev center:
# http://devcenter.wercker.com/docs/services/index.html
# services:
    # - postgres
    # http://devcenter.wercker.com/docs/services/postgresql.html

    # - mongo
    # http://devcenter.wercker.com/docs/services/mongodb.html

# This is the build pipeline. Pipelines are the core of wercker
# Read more about pipelines on our dev center
# http://devcenter.wercker.com/docs/pipelines/index.html
build:
  # The steps that will be executed on build
  # Steps make up the actions in your pipeline
  # Read more about steps on our dev center:
  # http://devcenter.wercker.com/docs/steps/index.html
  steps:
    # A step that sets up the python virtual environment
    - virtualenv:
        name: setup virtual environment
        install_wheel: false # Enable wheel to speed up builds (experimental)

    # # Use this virtualenv step for python 3.2
    # - virtualenv
    #     name: setup virtual environment
    #     python_location: /usr/bin/python3.2

    # A step that executes `pip install` command.
    - pip-install:
        requirements_file: ""
        packages_list: "requests"

    # # This pip-install clears the local wheel cache
    # - pip-install:
    #     clean_wheel_dir: true

    # A custom script step, name value is used in the UI
    # and the code value contains the command that get executed
    - script:
        name: echo python information
        code: |
          echo "python version $(python --version) running"
          echo "pip version $(pip --version) running"

    - script: 
        name: make fused
        code: |
          make -C tools/fused

    - script:
        name: setup
        code: |
          export PYTHONDONTWRITEBYTECODE=1
          export IUWANDBOX_COMMANDLINE_OPTION="../../test/syntax_tests.cpp -f"-DIUTEST_USE_MAIN=1" -f"-Werror" --encoding utf-8-sig --expand_include"

gcc-head:
  steps:
    - pip-install:
        requirements_file: ""
        packages_list: "requests"

    - script:
        name: c++1z
        code: |
          cd tools/wandbox
          python ./iuwandbox.py ${IUWANDBOX_COMMANDLINE_OPTION} -c gcc-head -x "warning,c++1z"

    - script:
        name: c++-98
        code: |
          cd tools/wandbox
          python ./iuwandbox.py ${IUWANDBOX_COMMANDLINE_OPTION} -c gcc-head -x "warning,c++98"

clang-head:
  steps:
    - pip-install:
        requirements_file: ""
        packages_list: "requests"

    - script:
        name: c++1z
        code: |
          cd tools/wandbox
          python ./iuwandbox.py ${IUWANDBOX_COMMANDLINE_OPTION} -c clang-head -x "warning,c++1z"

    - script:
        name: c++-98
        code: |
          cd tools/wandbox
          python ./iuwandbox.py ${IUWANDBOX_COMMANDLINE_OPTION} -c clang-head -x "warning,c++98"

gcc:
  steps:
    - pip-install:
        requirements_file: ""
        packages_list: "requests"

    - script:
        name: gcc-5.1.0
        code: |
          cd tools/wandbox
          python ./iuwandbox.py ${IUWANDBOX_COMMANDLINE_OPTION} -c gcc-5.1.0 -x "warning,c++1z"

    - script:
        name: gcc-4.9.1
        code: |
          cd tools/wandbox
          python ./iuwandbox.py ${IUWANDBOX_COMMANDLINE_OPTION} -c gcc-4.9.1 -x "warning,c++1y"

    - script:
        name: gcc-4.9.0
        code: |
          cd tools/wandbox
          python ./iuwandbox.py ${IUWANDBOX_COMMANDLINE_OPTION} -c gcc-4.9.0 -x "warning,c++11"

    - script:
        name: gcc-4.8.2
        code: |
          cd tools/wandbox
          python ./iuwandbox.py ${IUWANDBOX_COMMANDLINE_OPTION} -c gcc-4.8.2 -x "warning,gnu++11"

clang:
  steps:
    - pip-install:
        requirements_file: ""
        packages_list: "requests"

    - script:
        name: clang-3.7
        code: |
          cd tools/wandbox
          python ./iuwandbox.py ${IUWANDBOX_COMMANDLINE_OPTION} -c clang-3.7 -x "warning,gnu++14"

    - script:
        name: clang-3.3
        code: |
          cd tools/wandbox
          python ./iuwandbox.py ${IUWANDBOX_COMMANDLINE_OPTION} -c clang-3.3 -x "warning,gnu++1y"

    - script:
        name: clang-3.2
        code: |
          cd tools/wandbox
          python ./iuwandbox.py ${IUWANDBOX_COMMANDLINE_OPTION} -c clang-3.2 -x "warning"
          #python ./iuwandbox.py ${IUWANDBOX_COMMANDLINE_OPTION} -c clang-3.2 -x "warning,c++11" -f"-Qunused-arguments"

    - script:
        name: clang-3.1
        code: |
          cd tools/wandbox
          python ./iuwandbox.py ${IUWANDBOX_COMMANDLINE_OPTION} -c clang-3.1 -x "warning,gnu++11"

    - script:
        name: clang-3.1-98
        code: |
          cd tools/wandbox
          python ./iuwandbox.py ${IUWANDBOX_COMMANDLINE_OPTION} -c clang-3.1 -x "warning,c++98"
